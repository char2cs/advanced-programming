@startuml

top to bottom direction
skinparam linetype ortho

class Account {
  # balance: double
  - cbu: Long
  - client: Client
  + toString(): String
  + convert(double, Account): TransactionHistory
  + getBalance(): double
  + withdraw(double): TransactionHistory
  - generateCbu(): Long
  + getCbu(): Long
  + setClient(Client): void
  + transfer(double, Account): TransactionHistory
  + deposit(double): TransactionHistory
  + getClient(): Client
}
class CheckingAccount {
  - overdraftLimit: double
  + getOverdraftLimit(): double
  + deposit(double): TransactionHistory
  + transfer(double, Account): TransactionHistory
  + convert(double, Account): TransactionHistory
  + withdraw(double): TransactionHistory
  + toString(): String
}
class Client {
  - address: String
  - lastname: String
  - email: String
  - cuit: Long
  - phone: Long
  - accounts: Listed<Account>
  - name: String
  + getPhone(): Long
  + setLastname(String): void
  + setEmail(String): void
  + getEmail(): String
  + getAccounts(): Listed<Account>
  + setAccounts(Listed<Account>): void
  + getName(): String
  + setCuit(Long): void
  + setName(String): void
  + setAddress(String): void
  + setPhone(Long): void
  + toString(): String
  + getAddress(): String
  + getLastname(): String
  + getCuit(): Long
}
class Cryptocurrency {
  - currentValue: double
  - name: Currency
  + fetchCurrentValue(): void
  + getCurrentValue(): double
  + getName(): Currency
  + toString(): String
}
enum Currency << enumeration >> {
  + USDT: 
  + SOL: 
  + BTC: 
  + ETH: 
  + ADA: 
  + values(): Currency[]
  + valueOf(String): Currency
}
class SavingsAccount {
  - cuit: Long
  + toString(): String
  + withdraw(double): TransactionHistory
  + getCuit(): Long
  + transfer(double, Account): TransactionHistory
  + deposit(double): TransactionHistory
  + convert(double, Account): TransactionHistory
  + setCuit(Long): void
}
enum Status << enumeration >> {
  + UNKNOWN_ERROR: 
  + ERROR_OVERDRAFT_ISSUE: 
  + ERROR_ACCOUNT_IS_NOT_WALLET: 
  + SUCCESS: 
  + ERROR_ACCOUNT_IS_WALLET: 
  + ERROR_WALLETS_ARE_DIFFERENT_TYPE: 
  + ERROR_NOT_ENOUGH_BALANCE: 
  + ERROR_WALLETS_ARE_NOT_FROM_SAME_CLIENT: 
  + ERROR_ACCOUNTS_ARE_THE_SAME_ACCOUNT: 
  + values(): Status[]
  + valueOf(String): Status
}
class TransactionHistory {
  - toAccount: Account
  - status: Status
  - date: Date
  - type: Type
  - amount: double
  - fromAccount: Account
  + getToAccount(): Account
  + getStatus(): Status
  + toString(): String
  + getType(): Type
  + getDate(): Date
  + getAmount(): double
  + isPersonal(): boolean
  + getFromAccount(): Account
}
enum Type << enumeration >> {
  + TRANSFER: 
  + CONVERT: 
  + DEPOSIT: 
  + WITHDRAW: 
  + valueOf(String): Type
  + values(): Type[]
}
class Wallet {
  - cryptocurrency: Cryptocurrency
  + toString(): String
  + convert(double, Account): TransactionHistory
  + deposit(double): TransactionHistory
  + getCryptocurrency(): Cryptocurrency
  + withdraw(double): TransactionHistory
  + transfer(double, Account): TransactionHistory
}

CheckingAccount     -[#000082,plain]-^  Account            
SavingsAccount      -[#000082,plain]-^  Account            
Status              +-[#820000,plain]-  TransactionHistory 
Type                +-[#820000,plain]-  TransactionHistory 
Wallet              -[#000082,plain]-^  Account            
@enduml
